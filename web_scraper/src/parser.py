"""
web_scraper.src.parser

This module provides functions to parse availability data from the RA Centre website.
The data is parsed from a JSON object and transformed into a list of dictionaries
with specific columns. The module also includes helper functions to generate unique
slot IDs and determine facility types.
"""

from datetime import datetime
from typing import List, Dict, Any
import re
import logging
import pytz

from src.setup import DB_TZ

DataObject = List[Dict[str, Any]]

logger = logging.getLogger("data_parser")

def get_slot_id(item: dict) -> str:
    """
    Generates a unique slot ID based on the item data.

    The slot ID is generated by extracting the date and time from the item's name,
    formatting it as "YYYYMMDDHHMM", and appending the facility name in lowercase
    with spaces replaced by underscores.

    Args:
        item (dict): The item data containing the name and facility name.

    Returns:
        str: The unique slot ID.
    """
    this_year = datetime.now(tz=pytz.timezone("US/Eastern")).year
    date_str = datetime.strptime(
        item.get("name").split("- ", maxsplit=1)[-1], r"%A %b %d - %I:%M %p"
        ).replace(year=this_year).strftime("%Y%m%d%H%M")
    slot_id = date_str + "_" + item.get("facilityName").lower().replace(" ", "_")

    return slot_id

def get_facility_type(item: dict) -> str:
    """
    Determines the facility type based on the item data.

    The facility type is extracted from the facility name by converting it to lowercase,
    removing any non-alphabetic characters, and stripping leading and trailing spaces.

    Args:
        item (dict): The item data containing the facility name.

    Returns:
        str: The facility type.
    """
    facility_type = "".join(re.findall("[a-z -]*", item.get("facilityName").lower())).strip()

    return facility_type

def parse_availability_data(data: DataObject) -> DataObject | None:
    """
    Parses availability data from a json_object and returns a Pandas DataFrame.

    Args:
        data: the json_object containing the availability data.

    Returns:
        A Pandas DataFrame with the specified columns, or None if an error occurs.
    """

    data_list = []
    for item in data:
        try:
            schedule = item.get("schedule")  # Get the schedule (might be None)
            # Check if schedule exists, is list and is not empty
            if schedule and isinstance(schedule, list) and schedule:
                schedule_item = schedule[0] # Get the first schedule item.
                start_datetime = datetime.fromtimestamp(schedule_item["startDatetime"] / 1000) \
                    if schedule_item.get("startDatetime") else None
                end_datetime = datetime.fromtimestamp(schedule_item["endDatetime"] / 1000) \
                    if schedule_item.get("endDatetime") else None
            else:
                start_datetime = None
                end_datetime = None

            data_line = {
                "display_name": item.get("name"),
                "facility_name": item.get("facilityName"),
                "start_datetime": start_datetime,
                "end_datetime": end_datetime,
                "num_people": item.get("numPeople"),
                "has_reg_ended": item.get("hasRegEnded"),
                "inserted_datetime": datetime.now().astimezone(DB_TZ)
            }

            data_line["slot_id"] = get_slot_id(item)
            data_line["facility_type"] = get_facility_type(item)

            data_list.append(data_line)

        except (ValueError, TypeError) as e:
            logger.warning(f"Error processing item: {item.get('name')}. Error: {e}")
            continue

    if data_list:
        return data_list

    return None
